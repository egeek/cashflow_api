=begin
#Payment Gateway API

## API Reference Documentation The Payment Gateway API provides an API for creating new payment jobs, refunds and other payment related operations. This service handles extensive validation and conversion for each request, as well as providing a security layer by doing authentication and authorisation checks. ## Signing API calls To assure message consistency and making it hard to execute a man in the middle attack, all messages are signed with a SHA512 hash. This hash is calculated by appending the body data to the API password (password comes first). The calculated hash is converted to a hex-string and send in the header with `Hash: xxxxxx`. If the message body is empty just hash the password.  The gateway has the ability to have 2 passwords available at one time. When altering a password you first create a new second password. If all the systems have migrated to the new password than you can remove the first password. This way you can alter a password without having migration downtime. ## ConfigurationId header If you have been setup to use the gateway you will receive a configuration id. The configuration id identifies your application to the gateway with it's defined setup properies. Beside the hash you will have to supply the configuration id in the html header of each call to the gateway. The header format should look like: `ConfigurationId: xxxxx`. ## Webhooks It is important for a smooth and safe operation of a payment application to implement web hooks. A web hook is an api endpoint you create on your server implementation. This endpoint will be called from the gateway software on status changes of your payment job. This way you avoid having to poll for payment status changes, instead you will be notified of payment jobs for which the status has changed.  The gateway will perform a POST operation at the specified webhook url when the status of a paymentjob changes. For example from `Pending` to `Paid`. The body consist of notifyType, PaymentjobReference and PaymentReference.  The payment application can use the paymentjobReference and check it's status. Typically an internal delivery process is started for the order involved if the status is `Paid` or `Reserved`. The gateway expects a json response with httpstatus 200 OK, confirming the paymentjobreference and paymentreference.  ````json {  paymentJobReference: \"200421017498767380\",  paymentReference: \"200421100461508616\" } ````  When the gateway receives the confirmed paymentjobReference and paymentReference the webhook procedure will end until another status change occurs. If the response does not contain the expected json with a httpstatus 200 OK, or there is no response at all, the webhook call will get repeated at different intervals. ## Populating payment methods in the checkoutpage When you are performing a shop integration there will be a section in the checkout page where the paymentmethods should be presented to the buyer. We provide an api call _SupportedPaymentMethods_ to populate this section.  This call will provide all the available paymentmethods for this checkout, including payment logo's, surcharges etc. By implementing the result data of this call correctly will make the checkout page ready for all future paymentmethods, avoiding having to do development eachtime a new paymentmethod becomes available. ## Creating a basic paymentjob In order to collect money a paymentjob should be created. We assume you have setup paymentmethods in the configuration and a set of redirect urls for a paid, failed or cancelled payment. As a minimum you specify the amount to collect, currency and localisation for the paymentjob. As a response you will receive a redirect link (action link) where you should redirect the browser of the buyer too in order to complete the payment. This minimum requirement to start a paymentjob is in many cases not sufficient. We advise to at least supply the ordernumber and the billingidentity email when creating a paymentjob. Generally speaking, supply all that you know. Without this information, payment lookup and reconciliation of payments will become a hard job if at all possible. ## Direct acquiring f you are PCI-DSS compliant you can use the gateway to perform card acquiring. By direct acquiring we mean that you gather the card information on your servers and create a paymentjob whilst supplying the card information at the start of a payment. If a 3dSecure call is needed the redirectlink will point you to the 3d secure supplier. If the payment is directly approved you can still use the redirectlink but in that case it will point to the defined success url if the card is authorized. ## Reservations and captures If your business requires you to perform (card) reservations (also called authorisations) first and capture the reservations later, the gateway can support this scenario. The ability to first reserve an amount and later capture this amount, can be set in the configuration and corresponding payment method. The default for autoCapture is true. So if you do not set autoCapture to false authorised amounts are always immediatly captured.  Scenario's where you would want to set autoCapture to false are in cases where you can not deliver the goods immediatly. In this scenario you just want to capture the amount at the time you are ready to deliver the goods and in the meantime want to be sure that when the goods arrive you will receive the reserved funds.  So if you have set autoCapture to false you must manually capture the amount via a seperate api call if the paymentjob status has reached the Reserved status. As soon as the paymentjob reaches the status Reserved you can capture the reserved amount. If you do not specify `AmountToCapture` the full reserved amount will be captured. In case of card capturing the full amount is the only option now.  The cookbook to create a reservation/capture scenario is to start paymentjobs as normal, having the configuration setting for the paymentmethod set to autoCapture false value. And then call Capture as soon as the paymentjob status turns into Reserved and you are ready to deliver. ## Refunds  When you want to refund an amount because for example goods are returned you can call the Refunds method to refund an amount. In order to do so you need the paymentjobreference and paymentreference of the payment within the paymentjob that was used to pay an amount. You can not refund more in one call than the amount that was paid using the paymentmethod referenced by the paymentreference. Technically there can be multiple payments in a paymentjob that have brought together the amount paid in total.

OpenAPI spec version: v1
Contact: tech-support@cashflows.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.28-SNAPSHOT
=end

require 'date'

module CashFlowsApi
  class Country
    AF = 'AF'.freeze
    AL = 'AL'.freeze
    AQ = 'AQ'.freeze
    DZ = 'DZ'.freeze
    AS = 'AS'.freeze
    AD = 'AD'.freeze
    AO = 'AO'.freeze
    AG = 'AG'.freeze
    AZ = 'AZ'.freeze
    AR = 'AR'.freeze
    AU = 'AU'.freeze
    AT = 'AT'.freeze
    BS = 'BS'.freeze
    BH = 'BH'.freeze
    BD = 'BD'.freeze
    AM = 'AM'.freeze
    BB = 'BB'.freeze
    BE = 'BE'.freeze
    BM = 'BM'.freeze
    BT = 'BT'.freeze
    BO = 'BO'.freeze
    BA = 'BA'.freeze
    BW = 'BW'.freeze
    BV = 'BV'.freeze
    BR = 'BR'.freeze
    BZ = 'BZ'.freeze
    IO = 'IO'.freeze
    SB = 'SB'.freeze
    VG = 'VG'.freeze
    BN = 'BN'.freeze
    BG = 'BG'.freeze
    MM = 'MM'.freeze
    BI = 'BI'.freeze
    BY = 'BY'.freeze
    KH = 'KH'.freeze
    CM = 'CM'.freeze
    CA = 'CA'.freeze
    CV = 'CV'.freeze
    KY = 'KY'.freeze
    CF = 'CF'.freeze
    LK = 'LK'.freeze
    TD = 'TD'.freeze
    CL = 'CL'.freeze
    CN = 'CN'.freeze
    TW = 'TW'.freeze
    CX = 'CX'.freeze
    CC = 'CC'.freeze
    CO = 'CO'.freeze
    KM = 'KM'.freeze
    YT = 'YT'.freeze
    CG = 'CG'.freeze
    CD = 'CD'.freeze
    CK = 'CK'.freeze
    CR = 'CR'.freeze
    HR = 'HR'.freeze
    CU = 'CU'.freeze
    CY = 'CY'.freeze
    CZ = 'CZ'.freeze
    BJ = 'BJ'.freeze
    DK = 'DK'.freeze
    DM = 'DM'.freeze
    DO = 'DO'.freeze
    EC = 'EC'.freeze
    SV = 'SV'.freeze
    GQ = 'GQ'.freeze
    ET = 'ET'.freeze
    ER = 'ER'.freeze
    EE = 'EE'.freeze
    FO = 'FO'.freeze
    FK = 'FK'.freeze
    GS = 'GS'.freeze
    FJ = 'FJ'.freeze
    FI = 'FI'.freeze
    AX = 'AX'.freeze
    FR = 'FR'.freeze
    GF = 'GF'.freeze
    PF = 'PF'.freeze
    TF = 'TF'.freeze
    DJ = 'DJ'.freeze
    GA = 'GA'.freeze
    GE = 'GE'.freeze
    GM = 'GM'.freeze
    PS = 'PS'.freeze
    DE = 'DE'.freeze
    GH = 'GH'.freeze
    GI = 'GI'.freeze
    KI = 'KI'.freeze
    GR = 'GR'.freeze
    GL = 'GL'.freeze
    GD = 'GD'.freeze
    GP = 'GP'.freeze
    GU = 'GU'.freeze
    GT = 'GT'.freeze
    GN = 'GN'.freeze
    GY = 'GY'.freeze
    HT = 'HT'.freeze
    HM = 'HM'.freeze
    VA = 'VA'.freeze
    HN = 'HN'.freeze
    HK = 'HK'.freeze
    HU = 'HU'.freeze
    IS = 'IS'.freeze
    IN = 'IN'.freeze
    ID = 'ID'.freeze
    IR = 'IR'.freeze
    IQ = 'IQ'.freeze
    IE = 'IE'.freeze
    IL = 'IL'.freeze
    IT = 'IT'.freeze
    CI = 'CI'.freeze
    JM = 'JM'.freeze
    JP = 'JP'.freeze
    KZ = 'KZ'.freeze
    JO = 'JO'.freeze
    KE = 'KE'.freeze
    KP = 'KP'.freeze
    KR = 'KR'.freeze
    KW = 'KW'.freeze
    KG = 'KG'.freeze
    LA = 'LA'.freeze
    LB = 'LB'.freeze
    LS = 'LS'.freeze
    LV = 'LV'.freeze
    LR = 'LR'.freeze
    LY = 'LY'.freeze
    LI = 'LI'.freeze
    LT = 'LT'.freeze
    LU = 'LU'.freeze
    MO = 'MO'.freeze
    MG = 'MG'.freeze
    MW = 'MW'.freeze
    MY = 'MY'.freeze
    MV = 'MV'.freeze
    ML = 'ML'.freeze
    MT = 'MT'.freeze
    MQ = 'MQ'.freeze
    MR = 'MR'.freeze
    MU = 'MU'.freeze
    MX = 'MX'.freeze
    MC = 'MC'.freeze
    MN = 'MN'.freeze
    MD = 'MD'.freeze
    ME = 'ME'.freeze
    MS = 'MS'.freeze
    MA = 'MA'.freeze
    MZ = 'MZ'.freeze
    OM = 'OM'.freeze
    NA = 'NA'.freeze
    NR = 'NR'.freeze
    NP = 'NP'.freeze
    NL = 'NL'.freeze
    CW = 'CW'.freeze
    AW = 'AW'.freeze
    SX = 'SX'.freeze
    BQ = 'BQ'.freeze
    NC = 'NC'.freeze
    VU = 'VU'.freeze
    NZ = 'NZ'.freeze
    NI = 'NI'.freeze
    NE = 'NE'.freeze
    NG = 'NG'.freeze
    NU = 'NU'.freeze
    NF = 'NF'.freeze
    NO = 'NO'.freeze
    MP = 'MP'.freeze
    UM = 'UM'.freeze
    FM = 'FM'.freeze
    MH = 'MH'.freeze
    PW = 'PW'.freeze
    PK = 'PK'.freeze
    PA = 'PA'.freeze
    PG = 'PG'.freeze
    PY = 'PY'.freeze
    PE = 'PE'.freeze
    PH = 'PH'.freeze
    PN = 'PN'.freeze
    PL = 'PL'.freeze
    PT = 'PT'.freeze
    GW = 'GW'.freeze
    TL = 'TL'.freeze
    PR = 'PR'.freeze
    QA = 'QA'.freeze
    RE = 'RE'.freeze
    RO = 'RO'.freeze
    RU = 'RU'.freeze
    RW = 'RW'.freeze
    BL = 'BL'.freeze
    SH = 'SH'.freeze
    KN = 'KN'.freeze
    AI = 'AI'.freeze
    LC = 'LC'.freeze
    MF = 'MF'.freeze
    PM = 'PM'.freeze
    VC = 'VC'.freeze
    SM = 'SM'.freeze
    ST = 'ST'.freeze
    SA = 'SA'.freeze
    SN = 'SN'.freeze
    RS = 'RS'.freeze
    SC = 'SC'.freeze
    SL = 'SL'.freeze
    SG = 'SG'.freeze
    SK = 'SK'.freeze
    VN = 'VN'.freeze
    SI = 'SI'.freeze
    SO = 'SO'.freeze
    ZA = 'ZA'.freeze
    ZW = 'ZW'.freeze
    ES = 'ES'.freeze
    SS = 'SS'.freeze
    SD = 'SD'.freeze
    EH = 'EH'.freeze
    SR = 'SR'.freeze
    SJ = 'SJ'.freeze
    SZ = 'SZ'.freeze
    SE = 'SE'.freeze
    CH = 'CH'.freeze
    SY = 'SY'.freeze
    TJ = 'TJ'.freeze
    TH = 'TH'.freeze
    TG = 'TG'.freeze
    TK = 'TK'.freeze
    TO = 'TO'.freeze
    TT = 'TT'.freeze
    AE = 'AE'.freeze
    TN = 'TN'.freeze
    TR = 'TR'.freeze
    TM = 'TM'.freeze
    TC = 'TC'.freeze
    TV = 'TV'.freeze
    UG = 'UG'.freeze
    UA = 'UA'.freeze
    MK = 'MK'.freeze
    EG = 'EG'.freeze
    GB = 'GB'.freeze
    GG = 'GG'.freeze
    JE = 'JE'.freeze
    IM = 'IM'.freeze
    TZ = 'TZ'.freeze
    US = 'US'.freeze
    VI = 'VI'.freeze
    BF = 'BF'.freeze
    UY = 'UY'.freeze
    UZ = 'UZ'.freeze
    VE = 'VE'.freeze
    WF = 'WF'.freeze
    WS = 'WS'.freeze
    YE = 'YE'.freeze
    ZM = 'ZM'.freeze

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      constantValues = Country.constants.select { |c| Country::const_get(c) == value }
      raise "Invalid ENUM value #{value} for class #Country" if constantValues.empty?
      value
    end
  end
end
